CC = g++
LD = g++

NVCC = nvcc

PYVERSION = 3.5m
#PYPATH = /System/Library/Frameworks/Python.framework/Versions/$(PYVERSION)
#PYPATH =  /usr
PYPATH =  /home/dhidas/miniconda2/envs/oscars



CFLAGS = -DCUDA -Wall -ansi -pedantic -O3 -pthread -std=c++11 -fPIC
CUDACFLAGS = -DCUDA -std=c++11 -shared --compiler-options '-fPIC'
LIBS = -L$(MMADIR) -Llib -L/usr/lib64 -L/lib64 -L/lib -lpython$(PYVERSION) -L/usr/local/cuda/lib64 -lcuda -lcudart
INCLUDE = -Iinclude -I$(PYPATH)/include/python$(PYVERSION)

OBJS  = $(patsubst src/%.cc,lib/%.o,$(wildcard src/*.cc))
CUDAOBJS  = $(patsubst src/%.cu,lib/%.o,$(wildcard src/*.cu))
EXECS = $(patsubst exe/%.cc,bin/%,$(wildcard exe/*.cc))
EXEOBJS  = $(patsubst exe/%.cc,lib/%.o,$(wildcard exe/*.cc))


SOLIB =  lib/OSCARS.so




all: $(OBJS) $(CUDAOBJS) $(EXEOBJS) $(EXECS) $(SOLIB)

mma: bin/SRS_MMA


wstp/%_tm.cc : wstp/%.tm
	$(WSPREP) $< -o $@

lib/OSCARS.so : $(OBJS) $(CUDAOBJS)
	$(LD)  -Wall -shared $(LIBS) $(OBJS) $(CUDAOBJS) -o $@


lib/%.o : src/%.cc
	$(CC) -Wall $(CFLAGS) $(INCLUDE) -c $< -o $@

lib/%.o : src/%.cu
	$(NVCC) $(CUDACFLAGS) $(INCLUDE) -c $< -o $@


lib/%.o : exe/%.cc
	$(CC) -Wall $(CFLAGS) $(INCLUDE) -c $< -o $@




bin/% : $(OBJS) $(CUDAOBJS) lib/%.o
	$(LD) $(LIBS) $(OBJS) $(CUDAOBJS) lib/$*.o -o bin/$*






clean:
	rm -f $(EXECS) lib/*.o $(SOLIB)

