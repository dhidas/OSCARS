CC = g++
LD = g++

NVCC = nvcc

PYVERSION = 3.5m
#PYPATH = /System/Library/Frameworks/Python.framework/Versions/$(PYVERSION)
#PYPATH =  /usr
PYPATH =  /home/dhidas/miniconda2/envs/oscars




OBJSSR = lib/OSCARSSR.o \
         lib/OSCARSSR_Python.o \
         lib/T3DScalarContainer.o \
         lib/TField3D_Gaussian.o \
         lib/TField3D_Grid.o \
         lib/TField3D_IdealUndulator.o \
         lib/TField3D_UniformBox.o \
         lib/TFieldContainer.o \
         lib/TFieldPythonFunction.o \
         lib/TOMATH.o \
         lib/TParticleA.o \
         lib/TParticleBeamContainer.o \
         lib/TParticleBeam.o \
         lib/TParticleTrajectoryPoints.o \
         lib/TRandomA.o \
         lib/TSpectrumContainer.o \
         lib/TSurfaceOfPoints.o \
         lib/TSurfacePoint.o \
         lib/TSurfacePoints_3D.o \
         lib/TSurfacePoints_Rectangle.o \
         lib/TVector2D.o \
         lib/TVector3DC.o \
         lib/TVector3D.o \
         lib/TVector4D.o

OBJSTH = lib/OSCARSTH.o \
         lib/OSCARSTH_Python.o \
         lib/TOMATH.o \
         lib/TParticleA.o \
         lib/TParticleBeamContainer.o \
         lib/TParticleBeam.o \
         lib/TParticleTrajectoryPoints.o \
         lib/TRandomA.o \
         lib/TSpectrumContainer.o \
         lib/TSurfaceOfPoints.o \
         lib/TSurfacePoint.o \
         lib/TSurfacePoints_3D.o \
         lib/TSurfacePoints_Rectangle.o \
         lib/TVector2D.o \
         lib/TVector3DC.o \
         lib/TVector3D.o \
         lib/TVector4D.o


CFLAGS = -DCUDA -Wall -ansi -pedantic -O3 -pthread -std=c++11 -fPIC
CUDACFLAGS = -DCUDA -std=c++11 -shared --compiler-options '-fPIC'
LIBS = -L$(MMADIR) -Llib -L/usr/lib64 -L/lib64 -L/lib -lpython$(PYVERSION) -L/usr/local/cuda/lib64 -lcuda -lcudart
INCLUDE = -Iinclude -I$(PYPATH)/include/python$(PYVERSION)

OBJS  = $(patsubst src/%.cc,lib/%.o,$(wildcard src/*.cc))
CUDAOBJS  = $(patsubst src/%.cu,lib/%.o,$(wildcard src/*.cu))
EXECS = $(patsubst exe/%.cc,bin/%,$(wildcard exe/*.cc))
EXEOBJS  = $(patsubst exe/%.cc,lib/%.o,$(wildcard exe/*.cc))


SOLIBSR =  lib/sr.so
SOLIBTH =  lib/th.so


all: $(OBJS) $(CUDAOBJS) $(EXEOBJS) $(EXECS) $(SOLIBSR) $(SOLIBTH)




lib/%.o : src/%.cu
	$(NVCC) $(CUDACFLAGS) $(INCLUDE) -c $< -o $@

lib/%.o : src/%.cc
	$(CC) -Wall $(CFLAGS) $(INCLUDE) -c $< -o $@



lib/%.o : exe/%.cc
	$(CC) -Wall $(CFLAGS) $(INCLUDE) -c $< -o $@


lib/sr.so : $(OBJSSR) $(CUDAOBJS)
	$(LD)  -Wall -shared $(LIBS) $(OBJSSR) $(CUDAOBJS) -o $@

lib/th.so : $(OBJSTH)
	$(LD)  -Wall -shared $(LIBS) $(OBJSTH) -o $@




bin/% : $(OBJS) $(CUDAOBJS) lib/%.o
	$(LD) $(LIBS) $(OBJS) $(CUDAOBJS) lib/$*.o -o bin/$*






clean:
	rm -f $(EXECS) lib/*.o $(SOLIB)

